name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '9.0.x'
  NODE_VERSION: '20.x'

jobs:
  build-and-test-backend:
    name: Build and Test Backend
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Restore dependencies
      run: dotnet restore TennisApp/TennisApp.sln
      
    - name: Build solution
      run: dotnet build TennisApp/TennisApp.sln --no-restore --configuration Release
      
    - name: Run unit tests
      run: |
        dotnet test TennisApp/TennisApp.sln --no-build --configuration Release \
          --filter "FullyQualifiedName~TennisApp.Tests.Unit" \
          --verbosity normal \
          --logger "trx;LogFileName=unit-test-results.trx" \
          --logger "console;verbosity=detailed"
      
    - name: Run integration tests
      run: |
        dotnet test TennisApp/TennisApp.sln --no-build --configuration Release \
          --filter "FullyQualifiedName~TennisApp.Tests.Integration" \
          --verbosity normal \
          --logger "trx;LogFileName=integration-test-results.trx" \
          --logger "console;verbosity=detailed"
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          **/*.trx
        retention-days: 30
        
  build-angular:
    name: Build Angular Frontend
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: tennis-app-client/package-lock.json
        
    - name: Install dependencies
      run: npm ci
      working-directory: tennis-app-client
      
    - name: Build Angular app
      run: npm run build -- --configuration production
      working-directory: tennis-app-client
      continue-on-error: true
      
    - name: Lint Angular code
      run: npm run lint
      working-directory: tennis-app-client
      continue-on-error: true

    - name: Run Angular tests
      run: npm test -- --watch=false --browsers=ChromeHeadless --code-coverage
      working-directory: tennis-app-client
      
    - name: Upload Angular artifacts
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: angular-dist
        path: tennis-app-client/dist/
        retention-days: 7
        
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    # Code formatting check disabled - dotnet-format has issues with .NET 9
    # - name: Install dotnet tools
    #   run: |
    #     dotnet tool install --global dotnet-format
    #     
    # - name: Check code formatting
    #   run: cd TennisApp && dotnet format TennisApp.sln --verify-no-changes --verbosity diagnostic
    #   continue-on-error: true
      
    - name: Restore dependencies for security scan
      run: dotnet restore TennisApp/TennisApp.sln
      
    - name: Security scan
      run: |
        cd TennisApp && dotnet list package --vulnerable --include-transitive
        
  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build API Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./TennisApp
        file: ./TennisApp/TennisApp.API/Dockerfile
        push: false
        tags: tennisapp-api:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build Angular Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./tennis-app-client
        file: ./tennis-app-client/Dockerfile
        push: false
        tags: tennisapp-client:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-and-test-backend, build-angular, code-quality]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Generate changelog
      id: changelog
      run: |
        echo "## What's Changed" > CHANGELOG.md
        git log --pretty=format:"* %s (%h)" HEAD~10..HEAD >> CHANGELOG.md
        
    - name: Create Release
      uses: actions/create-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: false