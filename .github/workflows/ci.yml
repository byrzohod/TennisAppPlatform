name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'feature/**' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '9.0.x'
  NODE_VERSION: '20.x'

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Restore dependencies
      run: dotnet restore TennisApp/TennisApp.sln
      
    - name: Build solution
      run: dotnet build TennisApp/TennisApp.sln --no-restore --configuration Release
      
    - name: Run unit tests
      run: |
        dotnet test TennisApp/TennisApp.sln --no-build --configuration Release \
          --filter "FullyQualifiedName~TennisApp.Tests.Unit" \
          --verbosity normal \
          --logger "trx;LogFileName=unit-test-results.trx" \
          --logger "console;verbosity=detailed" \
          --collect:"XPlat Code Coverage"
      
    - name: Run integration tests
      run: |
        dotnet test TennisApp/TennisApp.sln --no-build --configuration Release \
          --filter "FullyQualifiedName~TennisApp.Tests.Integration" \
          --verbosity normal \
          --logger "trx;LogFileName=integration-test-results.trx" \
          --logger "console;verbosity=detailed" \
          --collect:"XPlat Code Coverage"
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-test-results
        path: |
          **/*.trx
          **/coverage.cobertura.xml
        retention-days: 30

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: tennis-app-client/package-lock.json
        
    - name: Install dependencies
      run: npm ci
      working-directory: tennis-app-client
      
    - name: Lint code
      run: npm run lint
      working-directory: tennis-app-client
      
    - name: Run unit tests
      run: npm test -- --watch=false --browsers=ChromeHeadless --code-coverage
      working-directory: tennis-app-client
      
    - name: Build application
      run: npm run build -- --configuration production
      working-directory: tennis-app-client
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: frontend-build
        path: tennis-app-client/dist/
        retention-days: 7

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: tennisapp_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: tennis-app-client/package-lock.json
        
    - name: Install backend dependencies
      run: dotnet restore TennisApp/TennisApp.sln
      
    - name: Build backend
      run: dotnet build TennisApp/TennisApp.sln --no-restore --configuration Release
      
    - name: Install frontend dependencies
      run: npm ci
      working-directory: tennis-app-client
      
    - name: Install Cypress
      run: npm install cypress --save-dev
      working-directory: tennis-app-client
      
    - name: Build frontend
      run: npm run build -- --configuration production
      working-directory: tennis-app-client
      
    - name: Start backend
      run: |
        dotnet run --project TennisApp/TennisApp.API/TennisApp.API.csproj --configuration Release &
        sleep 10
      env:
        ASPNETCORE_ENVIRONMENT: Test
        ASPNETCORE_URLS: http://localhost:5000
        ConnectionStrings__DefaultConnection: "Host=localhost;Database=tennisapp_test;Username=postgres;Password=postgres"
        
    - name: Run Cypress E2E tests
      uses: cypress-io/github-action@v6
      with:
        working-directory: tennis-app-client
        start: npm start
        wait-on: 'http://localhost:4200'
        wait-on-timeout: 120
        browser: chrome
        record: false
      env:
        CYPRESS_baseUrl: http://localhost:4200
      continue-on-error: true  # Don't fail the pipeline until we have frontend ready
      
    - name: Upload Cypress screenshots
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: cypress-screenshots
        path: tennis-app-client/cypress/screenshots
        retention-days: 7
        
    - name: Upload Cypress videos
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: cypress-videos
        path: tennis-app-client/cypress/videos
        retention-days: 7

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore TennisApp/TennisApp.sln
      
    - name: Check for security vulnerabilities
      run: |
        cd TennisApp && dotnet list package --vulnerable --include-transitive
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: tennis-app-client/package-lock.json
        
    - name: NPM audit
      run: npm audit --audit-level=moderate
      working-directory: tennis-app-client
      continue-on-error: true

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build API Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./TennisApp
        file: ./TennisApp/TennisApp.API/Dockerfile
        push: false
        tags: tennisapp-api:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build Frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./tennis-app-client
        file: ./tennis-app-client/Dockerfile
        push: false
        tags: tennisapp-client:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max