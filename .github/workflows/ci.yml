name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'feature/**' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '9.0.x'
  NODE_VERSION: '20.x'

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Restore dependencies
      run: dotnet restore TennisApp/TennisApp.sln
      
    - name: Build solution
      run: dotnet build TennisApp/TennisApp.sln --no-restore --configuration Release
      
    - name: Run unit tests
      run: |
        dotnet test TennisApp/TennisApp.sln --no-build --configuration Release \
          --filter "FullyQualifiedName~TennisApp.Tests.Unit" \
          --verbosity normal \
          --logger "trx;LogFileName=unit-test-results.trx" \
          --logger "console;verbosity=detailed" \
          --collect:"XPlat Code Coverage"
      
    - name: Run integration tests
      run: |
        dotnet test TennisApp/TennisApp.sln --no-build --configuration Release \
          --filter "FullyQualifiedName~TennisApp.Tests.Integration" \
          --verbosity normal \
          --logger "trx;LogFileName=integration-test-results.trx" \
          --logger "console;verbosity=detailed" \
          --collect:"XPlat Code Coverage"
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-test-results
        path: |
          **/*.trx
          **/coverage.cobertura.xml
        retention-days: 30

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: tennis-app-client/package-lock.json
        
    - name: Install dependencies
      run: npm ci
      working-directory: tennis-app-client
      
    - name: Lint code
      run: npm run lint
      working-directory: tennis-app-client
      
    - name: Run unit tests
      run: npm test -- --watch=false --browsers=ChromeHeadless --code-coverage
      working-directory: tennis-app-client
      
    - name: Build application
      run: npm run build -- --configuration production
      working-directory: tennis-app-client
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: frontend-build
        path: tennis-app-client/dist/
        retention-days: 7

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    # Remove dependencies to ensure e2e tests run for all PRs
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: tennisapp_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: tennis-app-client/package-lock.json
        
    - name: Install backend dependencies
      run: dotnet restore TennisApp/TennisApp.sln
      
    - name: Build backend
      run: dotnet build TennisApp/TennisApp.sln --no-restore --configuration Release
      
    - name: Run database migrations
      run: |
        dotnet ef database update --project TennisApp/TennisApp.Infrastructure/TennisApp.Infrastructure.csproj \
          --startup-project TennisApp/TennisApp.API/TennisApp.API.csproj \
          --configuration Release
      env:
        ConnectionStrings__DefaultConnection: "Host=localhost;Database=tennisapp_test;Username=postgres;Password=postgres"
      continue-on-error: true # Database might not have migrations yet
      
    - name: Start backend API
      run: |
        # Create appsettings.Test.json with proper configuration
        cat > TennisApp/TennisApp.API/appsettings.Test.json <<EOF
        {
          "ConnectionStrings": {
            "DefaultConnection": "Host=localhost;Database=tennisapp_test;Username=postgres;Password=postgres"
          },
          "JWT": {
            "SecretKey": "ThisIsAVerySecureSecretKeyForTestingPurposesOnly12345678",
            "Issuer": "TennisApp",
            "Audience": "TennisAppUsers",
            "ExpirationMinutes": 60
          },
          "Logging": {
            "LogLevel": {
              "Default": "Information",
              "Microsoft.AspNetCore": "Warning"
            }
          },
          "AllowedHosts": "*",
          "Cors": {
            "AllowedOrigins": ["http://localhost:4200"]
          }
        }
        EOF
        
        # Start the API in background
        dotnet run --project TennisApp/TennisApp.API/TennisApp.API.csproj \
          --configuration Release \
          --urls "http://localhost:5000" &
        
        # Wait for API to be ready
        echo "Waiting for API to start..."
        for i in {1..30}; do
          if curl -f http://localhost:5000/health 2>/dev/null; then
            echo "API is ready!"
            break
          fi
          echo "Waiting for API... ($i/30)"
          sleep 2
        done
      env:
        ASPNETCORE_ENVIRONMENT: Test
        
    - name: Install frontend dependencies
      run: npm ci
      working-directory: tennis-app-client
      
    - name: Install Cypress
      run: npm install cypress --save-dev
      working-directory: tennis-app-client
      if: success()
      
    - name: Update frontend environment for CI
      run: |
        # Update the environment file to point to the test API
        cat > src/environments/environment.ts <<EOF
        export const environment = {
          production: false,
          apiUrl: 'http://localhost:5000/api/v1'
        };
        EOF
        
        cat > src/environments/environment.prod.ts <<EOF
        export const environment = {
          production: true,
          apiUrl: 'http://localhost:5000/api/v1'
        };
        EOF
      working-directory: tennis-app-client
      
    - name: Build frontend for testing
      run: npm run build
      working-directory: tennis-app-client
      
    - name: Start frontend and run E2E tests
      run: |
        # Start Angular dev server in background
        npm start -- --host 0.0.0.0 --disable-host-check &
        
        # Wait for frontend to be ready
        echo "Waiting for frontend to start..."
        npx wait-on http://localhost:4200 -t 60000
        
        # Run Cypress tests
        npm run e2e:headless
      working-directory: tennis-app-client
      env:
        CYPRESS_baseUrl: http://localhost:4200
        CYPRESS_apiUrl: http://localhost:5000/api/v1
      
    - name: Upload Cypress screenshots
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: cypress-screenshots
        path: tennis-app-client/cypress/screenshots
        retention-days: 7
        if-no-files-found: ignore
        
    - name: Upload Cypress videos
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: cypress-videos
        path: tennis-app-client/cypress/videos
        retention-days: 7
        if-no-files-found: ignore
        
    - name: Upload Cypress test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: cypress-results
        path: tennis-app-client/cypress/results
        retention-days: 7
        if-no-files-found: ignore

  e2e-tests-docker:
    name: E2E Tests (Docker Compose)
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: false # Disabled for now, enable when Docker setup is ready
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Start services with Docker Compose
      run: |
        docker-compose -f docker-compose.ci.yml up -d
        
        # Wait for services to be healthy
        echo "Waiting for services to be healthy..."
        docker-compose -f docker-compose.ci.yml ps
        
        # Wait for health checks
        for i in {1..60}; do
          if docker-compose -f docker-compose.ci.yml exec -T api curl -f http://localhost:5000/health 2>/dev/null && \
             docker-compose -f docker-compose.ci.yml exec -T frontend curl -f http://localhost:4200 2>/dev/null; then
            echo "All services are ready!"
            break
          fi
          echo "Waiting for services... ($i/60)"
          sleep 2
        done
        
    - name: Run E2E tests against Docker services
      run: |
        docker-compose -f docker-compose.ci.yml exec -T frontend npm run e2e:headless
      env:
        CYPRESS_baseUrl: http://localhost:4200
        CYPRESS_apiUrl: http://localhost:5000/api/v1
        
    - name: Stop services
      run: docker-compose -f docker-compose.ci.yml down
      if: always()

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore TennisApp/TennisApp.sln
      
    - name: Check for security vulnerabilities
      run: |
        cd TennisApp && dotnet list package --vulnerable --include-transitive
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: tennis-app-client/package-lock.json
        
    - name: NPM audit
      run: npm audit --audit-level=moderate
      working-directory: tennis-app-client
      continue-on-error: true

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build API Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./TennisApp
        file: ./TennisApp/TennisApp.API/Dockerfile
        push: false
        tags: tennisapp-api:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build Frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./tennis-app-client
        file: ./tennis-app-client/Dockerfile
        push: false
        tags: tennisapp-client:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max